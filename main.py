from flask import Flask, request
import logging
import os
import json
import openai
from datetime import datetime
from pyrogram import Client
from telebot import TeleBot, types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

bot = TeleBot(TOKEN)
app = Flask(__name__)

# –ü–∞–º—è—Ç—å
HISTORY_FILE = "history.json"
MEMORY_FILE = "memory.json"

def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

history = load_json(HISTORY_FILE)
memory = load_json(MEMORY_FILE)

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["/–≤—Å–ø–æ–º–Ω–∏", "/–¥–Ω–µ–≤–Ω–∏–∫", "/–æ—á–∏—Å—Ç–∏", "/–Ω–∞–ø–æ–º–Ω–∏", "/—Å–æ–≤–µ—Ç"]
    for b in buttons:
        keyboard.add(b)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –®–µ—Ä–ª–æ–∫ ü§ñ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!", reply_markup=keyboard)

@bot.message_handler(commands=["–≤—Å–ø–æ–º–Ω–∏"])
def show_memory(message):
    user_id = str(message.chat.id)
    notes = memory.get(user_id, [])
    if notes:
        text = "\n".join(f"‚Ä¢ {note}" for note in notes)
    else:
        text = "–Ø –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª üß†"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["–¥–Ω–µ–≤–Ω–∏–∫"])
def show_history(message):
    user_id = str(message.chat.id)
    notes = history.get(user_id, [])
    if notes:
        text = "\n".join(f"[{note['time']}] {note['text']}" for note in notes)
    else:
        text = "–î–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç üï∞Ô∏è"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=["–æ—á–∏—Å—Ç–∏"])
def clear_all(message):
    user_id = str(message.chat.id)
    history[user_id] = []
    memory[user_id] = []
    save_json(HISTORY_FILE, history)
    save_json(MEMORY_FILE, memory)
    bot.send_message(message.chat.id, "–û—á–∏—â–µ–Ω–æ. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßΩ")

@bot.message_handler(commands=["–Ω–∞–ø–æ–º–Ω–∏"])
def set_reminder(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é ‚è∞")

@bot.message_handler(commands=["—Å–æ–≤–µ—Ç"])
def send_tip(message):
    bot.send_message(message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å üß©")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = str(message.chat.id)
    msg = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    memory.setdefault(user_id, []).append(msg)
    if len(memory[user_id]) > 20:
        memory[user_id] = memory[user_id][-20:]
    save_json(MEMORY_FILE, memory)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.setdefault(user_id, []).append({
        "text": msg,
        "time": datetime.now().strftime("%d.%m %H:%M")
    })
    if len(history[user_id]) > 50:
        history[user_id] = history[user_id][-50:]
    save_json(HISTORY_FILE, history)

    # –û—Ç–≤–µ—Ç –æ—Ç OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–¢—ã —Ç—ë–ø–ª—ã–π –∏ –ª–æ–≥–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å –∑–∞–±–æ—Ç–æ–π –∏ –∫—Ä–∞—Ç–∫–æ."},
                      {"role": "user", "content": msg}]
        )
        reply = response["choices"][0]["message"]["content"]
    except Exception as e:
        reply = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    bot.send_message(message.chat.id, reply)

# Flask Webhook
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "SherlockAI –∑–∞–ø—É—â–µ–Ω üïµÔ∏è", 200

if __name__ == "__main__":
    app.run(debug=False)